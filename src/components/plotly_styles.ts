// Generated by Copilot, modified...
import type { Layout } from 'plotly.js-dist-min';
import type { FoldType } from '../esri/services/aggregation';


// Main style configuration for each fold type
export const foldTypeStyles: Record<FoldType, Partial<Layout>> = {
  // Hour-based bins
  'hourOfDay': {
    xaxis: {
      title: { text: 'Hour of Day (Local Time for Region)' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 3,
      tickvals: [0, 3, 6, 9, 12, 15, 18, 21],
      ticktext: ['12:00 AM', '3:00 AM', '6:00 AM', '9:00 AM', '12:00 PM', '3:00 PM', '6:00 PM', '9:00 PM'],
      labelalias: {
        '0': '12:00 AM',
        '1': '1:00 AM',
        '2': '2:00 AM',
        '3': '3:00 AM',
        '4': '4:00 AM',
        '5': '5:00 AM',
        '6': '6:00 AM',
        '7': '7:00 AM',
        '8': '8:00 AM',
        '9': '9:00 AM',
        '10': '10:00 AM',
        '11': '11:00 AM',
        '12': '12:00 PM',
        '13': '1:00 PM',
        '14': '2:00 PM',
        '15': '3:00 PM',
        '16': '4:00 PM',
        '17': '5:00 PM',
        '18': '6:00 PM',
        '19': '7:00 PM',
        '20': '8:00 PM',
        '21': '9:00 PM',
        '22': '10:00 PM',
        '23': '11:00 PM'
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } as any,
    }
  },
  
  'hourOfWeek': {
    xaxis: {
      title: { text: 'Hour of Week' },
      tickmode: 'array',
      tickvals: [0, 24, 48, 72, 96, 120, 144],
      ticktext: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
    },
  },
  
  'hourOfMonth': {
    xaxis: {
      title: { text: 'Hour of Month' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 24 * 5, // Every 5 days
      tickformat: 'd'
    }
  },
  
  'hourOfYear': {
    xaxis: {
      title: { text: 'Day of Year' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 24 * 30, // Roughly monthly
      tickformat: 'd',
    }
  },
  
  'hourOfSeason': {
    xaxis: {
      title: { text: 'Hour of Season' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 24 * 7, // Weekly
      tickformat: 'd'
    }
  },
  
  // Day-based bins
  'dayOfWeek': {
    xaxis: {
      title: { text: 'Day of Week' },
      tickmode: 'array',
      tickvals: [0, 1, 2, 3, 4, 5, 6],
      ticktext: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    }
  },
  
  'dayOfMonth': {
    xaxis: {
      title: { text: 'Day of Month' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 5,
      tickformat: 'd'
    }
  },
  
  'dayOfYear': {
    xaxis: {
      title: { text: 'Day of Year' },
      tickmode: 'array',
      tickvals: [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
      ticktext: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    }
  },
  
  'dayOfSeason': {
    xaxis: {
      title: { text: 'Day of Season' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 10,
      tickformat: 'd'
    }
  },
  
  // Week-based bins
  'weekOfMonth': {
    xaxis: {
      title: { text: 'Week of Month' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 1,
      tickformat: 'd'
    }
  },
  
  'weekOfYear': {
    xaxis: {
      title: { text: 'Week of Year' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 4,
      tickformat: 'd'
    }
  },
  
  'weekOfSeason': {
    xaxis: {
      title: { text: 'Week of Season' },
      tickmode: 'linear',
      tick0: 0,
      dtick: 2,
      tickformat: 'd'
    }
  },
  
  // Month-based bins
  'monthOfYear': {
    xaxis: {
      title: { text: 'Month of Year' },
      tickmode: 'array',
      tickvals: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
      ticktext: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    }
  },
  
  'monthOfSeason': {
    xaxis: {
      title: { text: 'Month of Season' },
      tickmode: 'array',
      tickvals: [0, 1, 2],
      ticktext: ['Month 1', 'Month 2', 'Month 3']
    }
  },
  
  // None-period bins (simple binning with dates)
  'hourOfNone': {
    xaxis: {
      title: { text: 'Date' },
      type: 'date',
      // tickformat: '%Y-%m-%d %H:%M'
    }
  },
  
  'dayOfNone': {
    xaxis: {
      title: { text: 'Date' },
      type: 'date',
      // tickformat: '%Y-%m-%d'
    }
  },
  
  'weekOfNone': {
    xaxis: {
      title: { text: 'Date' },
      type: 'date',
      // tickformat: '%Y-%m-%d'
    }
  },
  
  'monthOfNone': {
    xaxis: {
      title: { text: 'Date' },
      type: 'date',
      // tickformat: '%Y-%m'
    }
  },
  
  // Special cases
  'dayOfWeekdayWeekend': {
    xaxis: {
      title: { text: 'Day Type' },
      tickmode: 'array',
      tickvals: [0, 1],
      ticktext: ['Weekend', 'Weekday']
    }
  },
  
  'hourOfWeekdayWeekend': {
    xaxis: {
      title: { text: 'Hour of Day' },
      tickmode: 'array',
      tickvals: [0, 6, 12, 18, 24, 30, 36, 42],
      ticktext: ['0:00 WD', '6:00 WD', '12:00 WD', '18:00 WD', '0:00 WE', '6:00 WE', '12:00 WE', '18:00 WE']
    }
  }
};

/**
 * Get the Plotly layout styling for a specific fold type
 */
export function getFoldTypeStyle(foldType: FoldType): Partial<Layout> {
  return foldTypeStyles[foldType];
}

function deepMerge(target: object, source: object): object {
  for (const key in source) {
    // if key has and non-array object, iterate recursively
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      target[key] = deepMerge(target[key] || {}, source[key]);
    } else {
      target[key] = source[key];
    }
  }
  return target;
}


export function mergeFoldTypeLayout(foldType: FoldType, customLayout?: Partial<Layout>): Partial<Layout> {
  const foldStyle = getFoldTypeStyle(foldType);
  return deepMerge(foldStyle , customLayout || {});
}
